// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
	public:
    //Function to find if the given edge is a bridge in graph.
    int f=0;
    void dfs(int i,int parent,vector<int> &vis,vector<int> &low,vector<int> &tin,int c,int d,int t,vector<int> adj[]){
       vis[i]=1;
       tin[i]=low[i]=t++;
       
       for(int x:adj[i]){
           if(x==parent) continue;
           if(vis[x]==0){
               dfs(x,i,vis,low,tin,c,d,t,adj);
               low[i]=min(low[i],low[x]);
               if(low[x]>tin[i] && ((c==x && d==i) || (c==i && d==x))){
                   f=1;
                   return;
               }
               
           }
           else{
               low[i]=min(low[i],tin[x]);
           }
       }
    }
    int isBridge(int V, vector<int> adj[], int c, int d) 
    {
        // Code here
        vector<int> vis(V,0);
        vector<int> tin(V,-1);
        vector<int> low(V,-1);
        int t=0;
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                dfs(i,-1,vis,low,tin,c,d,t,adj);
                if(f==1) return 1;
            }
        }
        return 0;
        
    }
};

// { Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        int i=0;
        while (i++<E) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back (v);
            adj[v].push_back (u);
        }
        
        int c,d;
        cin>>c>>d;
        
        Solution obj;
    	cout << obj.isBridge(V, adj, c, d) << "\n";
    }

    return 0;
}

  // } Driver Code Ends
