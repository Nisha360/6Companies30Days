class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,int>> q;
        int n=grid.size();
        int m=grid[0].size();
        int i=-1,j=-1;
        int f=0;
        int fresh=0;
        for(i=0;i<n;i++){
            for(j=0;j<m;j++){
                if(grid[i][j]==2){
                    
                  q.push({i,j});
                   
                }
                else if(grid[i][j]==1) fresh++;
            }
           // if(f==1) break;
        }
        if(fresh==0) return 0;
       vector<pair<int,int>> dir={{0,1},{1,0},{-1,0},{0,-1}};
        int cnt=-1;
        while(!q.empty()){
            int sz=q.size();
           
          //  cnt++;
            int p=0;
            for(int k=0;k<sz;k++){
                int x=q.front().first;
                int y=q.front().second;
               q.pop();
                for(auto it:dir){
                    int a=x+it.first;
                    int b=y+it.second;
                    if(a>=0 && b>=0 && a<n && b<m && grid[a][b]==1){
                        grid[a][b]=2;
                        fresh--;
                        q.push({a,b});
                    }
                }
            }
            cnt++;
        }
        return fresh == 0 ? cnt : -1;
    }
};
