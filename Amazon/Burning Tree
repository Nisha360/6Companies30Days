// { Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};


Node *buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node *root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node *> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node *currNode = queue.front();
        queue.pop();

        // Get the current Node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current Node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current Node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


 // } Driver Code Ends
//User function Template for C++

class Solution {
  public:
  Node* temp=NULL;
  
  void solve(Node* root,map<Node*,Node*> &m,int target){
      if(root==NULL) return;
      
      if(root->data==target) temp=root;
      
      if(root->left){
          m[root->left]=root;
          solve(root->left,m,target);
      }
      if(root->right){
          m[root->right]=root;
          solve(root->right,m,target);
      }
      
      
  }
  
  
    int minTime(Node* root, int target) 
    {
        // Your code goes here
        if(root==NULL) return 0;
        
        queue<Node*> q;
        map<Node*,Node*> m;
        vector<int> vis(10000,0);
        
        solve(root,m,target);
       // cout<<temp->data<<endl;
      // cout<<m[temp]<<endl;
        int times=0;
        q.push(temp);
        vis[temp->data]=1;
        while(!q.empty()){
            int sz=q.size();
           // cout<<sz<<endl;
            while(sz--){
                Node* curr=q.front();
               // cout<<curr->data<<"*"<<endl;
               // cout<<vis[curr->data]<<endl;
                q.pop();
               
                if(curr->left && vis[curr->left->data]==0){
                    // cout<<curr->left->data<<endl;
                    q.push(curr->left);
                    vis[curr->left->data]=1;
                } 
                if(curr->right && vis[curr->right->data]==0){
                    // cout<<curr->right->data<<endl;
                    q.push(curr->right);
                    vis[curr->right->data]=1;
                }
                if(m[curr] && vis[m[curr]->data]==0) {
                    q.push(m[curr]);
                    vis[m[curr]->data]=1;
                }
              //  cout<<q.size()<<endl;
            }
            times++;
        }
        
        return times-1;
        
        
        
    }
};

// { Driver Code Starts.

int main() 
{
    int tc;
    scanf("%d ", &tc);
    while (tc--) 
    {    
        string treeString;
        getline(cin, treeString);
        // cout<<treeString<<"\n";
        int target;
        cin>>target;
        // cout<<target<<"\n";

        Node *root = buildTree(treeString);
        Solution obj;
        cout<<obj.minTime(root, target)<<"\n"; 

        cin.ignore();

    }


    return 0;
}
  // } Driver Code Ends
