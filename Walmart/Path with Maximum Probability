class Solution {
public:
   
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
       vector<vector<pair<int,double>>> g(n);
        
        for(int i=0;i<edges.size();i++){
            g[edges[i][0]].push_back({edges[i][1],succProb[i]});
            g[edges[i][1]].push_back({edges[i][0],succProb[i]});
        }
        
        vector<int> vis(n,0);
        vector<double> mx(n,(double)0.0);
        
        priority_queue<pair<double,int>> pq;
        pq.push({(double)1.0,start});
        mx[start]=1.0;
        
        while(!pq.empty()){
            int node=pq.top().second;
            double val=pq.top().first;
            pq.pop();
            if(!vis[node]){
                vis[node]=1;
                for(auto x:g[node]){
                    if(mx[x.first]<val*x.second){
                        mx[x.first]=val*x.second;
                        pq.push({mx[x.first],x.first});
                    }
                }
            }
        }
        return mx[end];
        
    }
};
