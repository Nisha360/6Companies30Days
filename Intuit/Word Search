// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
int f=0;
void dfs(int i,int j,vector<vector<char>> &board,string word,int k){
    if(k==word.size()){
        f=1;
        return;
    }
    if(i>=board.size() || j>=board[0].size() || i<0 ||j<0 || board[i][j]!=word[k]) return ;
    char c=board[i][j];
     board[i][j]='0';
     
     dfs(i+1,j,board,word,k+1);
     dfs(i-1,j,board,word,k+1);
     dfs(i,j+1,board,word,k+1);
     dfs(i,j-1,board,word,k+1);
     
     board[i][j]=c;
     
    
}
    bool isWordExist(vector<vector<char>>& board, string word) {
        // Code here
        int n=board.size();
        int m=board[0].size();
        vector<vector<int>> vis(n,vector<int> (m));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
            if(board[i][j]==word[0]){
                 dfs(i,j,board,word,0);
                 if(f==1) return true;
            }
            }
        }
        
        return false;
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<char>>board(n, vector<char>(m, '*'));
		for(int i = 0; i < n; i++)
			for(int j = 0; j < m; j++)
				cin >> board[i][j];
		string word;
		cin >> word;
		Solution obj;
		bool ans = obj.isWordExist(board, word);
		if(ans)
			cout << "1\n";
		else cout << "0\n";
	}
	return 0;
}  // } Driver Code Ends
